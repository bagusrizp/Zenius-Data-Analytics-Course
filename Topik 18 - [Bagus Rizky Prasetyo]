{"cells":[{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":111},"id":"__wfaiUVecdX","outputId":"1f6c0482-5113-4fc2-9edb-8c66e3589677","executionInfo":{"status":"ok","timestamp":1669103104031,"user_tz":-420,"elapsed":974686,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a678fd52-acec-4f9a-be90-59129148be77\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a678fd52-acec-4f9a-be90-59129148be77\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving train.csv to train (2).csv\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:3326: DtypeWarning: Columns (1) have mixed types.Specify dtype option on import or set low_memory=False.\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]}],"source":["#Untuk mengupload file\n","from google.colab import files\n","\n","#Untuk membaca file\n","import io\n","\n","#Untuk mengimport file\n","import pandas as pd\n","\n","#Untuk visualisasi\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","uploaded = files.upload()\n","df = pd.read_csv(io.BytesIO(uploaded['train.csv']))\n","\n","#Praktik kali ini mencoba upload file dengan cara yang sedikit berbeda, yaitu\n","#dengan menggunakan 'io' dan 'files'. Dataset yang akan digunakan diupload,\n","#kemudian dibaca dengan library 'pandas'. "]},{"cell_type":"markdown","metadata":{"id":"sDCgHgK4b_7P"},"source":["# Data Understanding"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"VT53Z_0qfj0c","executionInfo":{"status":"ok","timestamp":1669103104032,"user_tz":-420,"elapsed":11,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}},"outputId":"f21622d7-d03b-47a7-b863-f9fbfa53df7f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Id County Province_State Country_Region  Population    Weight        Date  \\\n","0   1    NaN            NaN    Afghanistan    27657145  0.058359  2020-01-23   \n","1   2    NaN            NaN    Afghanistan    27657145  0.583587  2020-01-23   \n","2   3    NaN            NaN    Afghanistan    27657145  0.058359  2020-01-24   \n","3   4    NaN            NaN    Afghanistan    27657145  0.583587  2020-01-24   \n","4   5    NaN            NaN    Afghanistan    27657145  0.058359  2020-01-25   \n","\n","           Target  TargetValue  \n","0  ConfirmedCases            0  \n","1      Fatalities            0  \n","2  ConfirmedCases            0  \n","3      Fatalities            0  \n","4  ConfirmedCases            0  "],"text/html":["\n","  <div id=\"df-4d315e69-57d4-46fe-aecd-bfa67aa96584\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>County</th>\n","      <th>Province_State</th>\n","      <th>Country_Region</th>\n","      <th>Population</th>\n","      <th>Weight</th>\n","      <th>Date</th>\n","      <th>Target</th>\n","      <th>TargetValue</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Afghanistan</td>\n","      <td>27657145</td>\n","      <td>0.058359</td>\n","      <td>2020-01-23</td>\n","      <td>ConfirmedCases</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Afghanistan</td>\n","      <td>27657145</td>\n","      <td>0.583587</td>\n","      <td>2020-01-23</td>\n","      <td>Fatalities</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Afghanistan</td>\n","      <td>27657145</td>\n","      <td>0.058359</td>\n","      <td>2020-01-24</td>\n","      <td>ConfirmedCases</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Afghanistan</td>\n","      <td>27657145</td>\n","      <td>0.583587</td>\n","      <td>2020-01-24</td>\n","      <td>Fatalities</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Afghanistan</td>\n","      <td>27657145</td>\n","      <td>0.058359</td>\n","      <td>2020-01-25</td>\n","      <td>ConfirmedCases</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d315e69-57d4-46fe-aecd-bfa67aa96584')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4d315e69-57d4-46fe-aecd-bfa67aa96584 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4d315e69-57d4-46fe-aecd-bfa67aa96584');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}],"source":["#Menampilkan 5 kolom teratas dengan menggunakan 'head'. Hal ini dilakukan untuk\n","#memahami data.\n","\n","df.head()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Vx48y_tPz3p","executionInfo":{"status":"ok","timestamp":1669103104033,"user_tz":-420,"elapsed":10,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}},"outputId":"62049d14-1b0c-4dd4-a69c-414808ef7380"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(969640, 9)"]},"metadata":{},"execution_count":13}],"source":["#Gunakan fungsi 'shape' untuk melihat dimensi data. Dataset yang digunakan\n","#memiliki 7043 baris dan 21 kolom/atribut.\n","\n","df.shape"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WXW-8yaMgCG3","executionInfo":{"status":"ok","timestamp":1669103104033,"user_tz":-420,"elapsed":7,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}},"outputId":"2fb416e3-591d-4def-e367-aa34fca067ab"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Id', 'County', 'Province_State', 'Country_Region', 'Population',\n","       'Weight', 'Date', 'Target', 'TargetValue'],\n","      dtype='object')"]},"metadata":{},"execution_count":14}],"source":["#Gunakan fungsi 'columns' untuk melihat nama kolom yang digunakan pada data.\n","#Hal ini dilakukan sebagai salah satu langkah untuk memahami data yang\n","#digunakan.\n","\n","df.columns"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hZ3YhrKTgZEc","executionInfo":{"status":"ok","timestamp":1669103104820,"user_tz":-420,"elapsed":793,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}},"outputId":"ca030da6-65a4-4511-e32c-1388873ab7c0"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 969640 entries, 0 to 969639\n","Data columns (total 9 columns):\n"," #   Column          Non-Null Count   Dtype  \n","---  ------          --------------   -----  \n"," 0   Id              969640 non-null  int64  \n"," 1   County          880040 non-null  object \n"," 2   Province_State  917280 non-null  object \n"," 3   Country_Region  969640 non-null  object \n"," 4   Population      969640 non-null  int64  \n"," 5   Weight          969640 non-null  float64\n"," 6   Date            969640 non-null  object \n"," 7   Target          969640 non-null  object \n"," 8   TargetValue     969640 non-null  int64  \n","dtypes: float64(1), int64(3), object(5)\n","memory usage: 66.6+ MB\n"]}],"source":["#Gunakan fungsi 'info' untuk melihat tipe data masing-masing kolom dan juga\n","#value non-null yang terdapat pada data. Terdapat keanehan pada atribut\n","#'TotalCharges' yang teridentifikasi sebagai object, padahal data tersebut \n","#seharusnya bertipe numerik apabila dilihat dari isi valuenya pada baris [2].\n","\n","df.info()"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"6UbSQnKFQv0K","executionInfo":{"status":"ok","timestamp":1669103104820,"user_tz":-420,"elapsed":8,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}},"outputId":"5f47e266-968e-49e5-c0f5-b13348ec7cb5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  Id    Population         Weight    TargetValue\n","count  969640.000000  9.696400e+05  969640.000000  969640.000000\n","mean   484820.500000  2.720127e+06       0.530870      12.563518\n","std    279911.101846  3.477771e+07       0.451909     302.524795\n","min         1.000000  8.600000e+01       0.047491  -10034.000000\n","25%    242410.750000  1.213300e+04       0.096838       0.000000\n","50%    484820.500000  3.053100e+04       0.349413       0.000000\n","75%    727230.250000  1.056120e+05       0.968379       0.000000\n","max    969640.000000  1.395773e+09       2.239186   36163.000000"],"text/html":["\n","  <div id=\"df-0ce9d740-63ec-4c00-bc8f-7d5b4a437cd7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Id</th>\n","      <th>Population</th>\n","      <th>Weight</th>\n","      <th>TargetValue</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>969640.000000</td>\n","      <td>9.696400e+05</td>\n","      <td>969640.000000</td>\n","      <td>969640.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>484820.500000</td>\n","      <td>2.720127e+06</td>\n","      <td>0.530870</td>\n","      <td>12.563518</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>279911.101846</td>\n","      <td>3.477771e+07</td>\n","      <td>0.451909</td>\n","      <td>302.524795</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>8.600000e+01</td>\n","      <td>0.047491</td>\n","      <td>-10034.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>242410.750000</td>\n","      <td>1.213300e+04</td>\n","      <td>0.096838</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>484820.500000</td>\n","      <td>3.053100e+04</td>\n","      <td>0.349413</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>727230.250000</td>\n","      <td>1.056120e+05</td>\n","      <td>0.968379</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>969640.000000</td>\n","      <td>1.395773e+09</td>\n","      <td>2.239186</td>\n","      <td>36163.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ce9d740-63ec-4c00-bc8f-7d5b4a437cd7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0ce9d740-63ec-4c00-bc8f-7d5b4a437cd7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0ce9d740-63ec-4c00-bc8f-7d5b4a437cd7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}],"source":["#Gunakan fungsi 'describe' untuk memberikan pemahaman pada data numerik. Pada\n","#bagian ini dapat dilihat bahwa atribut 'SeniorCitizen' memiliki nilai minimal\n","#0 dan maksimal 1. Terdapat indikasi bahwa data ini bertipe kategorikal.\n","\n","df.describe()"]},{"cell_type":"markdown","metadata":{"id":"SDnSVWi6dUnd"},"source":["# Data Cleaning"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pCVBOT-Sh1Y_","executionInfo":{"status":"ok","timestamp":1669103104821,"user_tz":-420,"elapsed":7,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}},"outputId":"adb9110d-d49e-4d80-a4df-ef1c852fb950"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Id                    0\n","County            89600\n","Province_State    52360\n","Country_Region        0\n","Population            0\n","Weight                0\n","Date                  0\n","Target                0\n","TargetValue           0\n","dtype: int64"]},"metadata":{},"execution_count":17}],"source":["#Gunakan fungsi 'isnull().sum()' untuk melihat jumlah null yang terdapat pada\n","#dataset setelah dilakukan pengubahan jenis tipe data. Dapat terlihat pada\n","#atribut 'TotalCharges' bahwa terdapat 11 null yang muncul.\n","\n","df.isnull().sum()"]},{"cell_type":"code","source":["df[\"County\"].fillna(\"Unknown County\", inplace = True)"],"metadata":{"id":"67EZhFV9OHm1","executionInfo":{"status":"ok","timestamp":1669103105313,"user_tz":-420,"elapsed":497,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["df[\"Province_State\"].fillna(\"Unknown Province_State\", inplace = True)"],"metadata":{"id":"mYLpfaPOOfLV","executionInfo":{"status":"ok","timestamp":1669103105313,"user_tz":-420,"elapsed":2,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["df.to_csv('new_train.csv', index=False)"],"metadata":{"id":"8eb7thlOOsER","executionInfo":{"status":"ok","timestamp":1669103109864,"user_tz":-420,"elapsed":4553,"user":{"displayName":"Bagus Rizky Prasetyo","userId":"11882850620546169176"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"5YGS5bw-aW9H"},"outputs":[],"source":["#Hapus nilai null yang terdapat pada kolom dengan fungsi 'dropna()'. Fungsi\n","#ini akan menghapus keseluruhan baris yang memiliki nilai null. Setelah itu,\n","#lakukan pengecekan dengan fungsi 'isnull().sum(). Metode penghapusan digunakan\n","#karena tidak terdapat informasi yang mendukung untuk mengisi null dengan value\n","#lain, sehingga untuk saat ini dianggap yang paling aman.\n","\n","df = df.dropna()\n","df.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"MgI61_YQie_N"},"outputs":[],"source":["#Gunakan kode dibawah untuk menghapus kolom 'customerID'. Penghapusan dilakukan\n","#untuk meringkas dataset agar lebih mudah dilakukan analisa nantinya. Atribut\n","#'customerID' tidak memiliki pengaruh yang signifikan untuk pencarian insight\n","#pada data nantinya.\n","\n","df = df.drop(columns=['customerID'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"j4GLsx4Li6cD"},"outputs":[],"source":["#Gunakan fungsi 'describe' sekali lagi untuk melihat statistik dari data\n","#numerikal yang terdapat pada dataset setelah dilakukan proses cleaning.\n","\n","df.describe()\n"]},{"cell_type":"markdown","metadata":{"id":"Z-GYCc64oj14"},"source":["# Data Visualizing"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"6736VIoWkDCe"},"outputs":[],"source":["#Gunakan countplot untuk memvisualisasikan jumlah value dalam suatu atribut\n","#kategorikal. Pada kali ini atribut 'Churn' akan digunakan untuk melihat jumlah\n","#value yes dan no didalamnya. Dapat dilihat bahwa jumlah 'no' jauh lebih banyak\n","#daripada 'yes'.\n","\n","#Import library seaborn\n","import seaborn as sns\n","\n","#Tampilkan diagram\n","sns.countplot(data=df,x=\"Churn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"gzvjEQVGkwV2"},"outputs":[],"source":["#Kali ini terdapat penambahan dalam visualisasi plot dengan menambahkan atribut\n","#'Gender' yang digolongkan berdasarkan 'Churn'. Hasilnya dapat dilihat bahwa\n","#tidak terdapat perbedaan yang signifikan antara value 'yes' dan 'no' pada \n","#'male' dan 'female'.\n","\n","sns.countplot(data=df,x=\"gender\",hue=\"Churn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"JknJtm7XlMzd"},"outputs":[],"source":["#Atribut Tenure divisualisasikan berdasarkan atribut Churn. Terdapat outliers\n","#yang terdeteksi pada plot tersebut, tepatnya pada value 'Churn Yes'. Konteks\n","#dari plot ini adalah distribusi pengguna yang memberhentikan penggunaan layanan\n","#dalam sebulan terakhir. Boxplot 'No' menyatakan data yang terdistribusi secara\n","#normal dan hampir simetris. Garis median berada di tengah kotak dengan panjang\n","#whisker yang hampir sama antara atas dan bawah. Boxplot 'Yes' sangat berbeda\n","#karena garis median tidak terletak ditengah kotak. Whisker atas dan bawahpun\n","#berbeda dengan dominan panjang pada bagian atas, serta adanya outliers.\n","#Sehingga, boxplot 'Yes' dapat dikategorikan sebagai positive skewness.  \n","\n","sns.boxplot(data=df,x=\"tenure\",y=\"Churn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"6c6fp-9kl1tD"},"outputs":[],"source":["#Atribut MonthlyCharges divisualisasikan berdasarkan atribut Churn.Konteks\n","#dari plot ini adalah distribusi pengguna yang memberhentikan penggunaan layanan\n","#dalam sebulan terakhir. Boxplot 'No' memperlihatkan data yang tidak\n","#terdistribusi secara normal. Garis median berada lebih dekat dengan kuartil 3 \n","#dengan whisker atas lebih panjang daripada bawah. Sehingga, Boxplot 'No' dapat\n","#dikategorikan sebagai positive skewness. Boxplot 'Yes' berbeda karena garis \n","#median terletak lebih dekat dengan kuartil 3. Whisker atas dan bawahpun\n","#berbeda dengan dominan panjang pada bagian bawah. Sehingga, boxplot 'Yes' dapat\n","#dikategorikan sebagai positive skewness. Kedua boxplot tidak memiliki outliers.  \n","\n","sns.boxplot(data=df,x=\"MonthlyCharges\",y=\"Churn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"XurFvK7wmILK"},"outputs":[],"source":["#Atribut 'TotalCharges' divisualisasikan berdasarkan atribut 'Churn'. Konteks\n","#dari plot ini adalah distribusi total tagihan untuk pengguna yang \n","#memberhentikan penggunaan layanan dalam sebulan terakhir. Boxplot 'No' \n","#memperlihatkan data yang tidak terdistribusi secara normal. Garis median berada\n","#lebih dekat dengan kuartil 1 dengan whisker atas lebih panjang daripada bawah.\n","#Sehingga, Boxplot 'No' dapat dikategorikan sebagai positive skewness.\n","#Boxplot 'Yes' memiliki kemiripan dengan boxplot 'No' karena garis median \n","#terletak lebih dekat dengan kuartil 1. Whisker atas dan bawahpun berbeda dengan\n","#dominan panjang pada bagian atas. Sehingga, boxplot 'Yes' dapat dikategorikan \n","#sebagai positive skewness. Perbedaan pada kedua boxplot adalah ditemukannya\n","#outliers yang cukup banyak pada boxplot 'Yes', sedangkan pada boxplot 'No'\n","#tidak ditemukan adanya outliers.\n","\n","sns.boxplot(data=df,x=\"TotalCharges\",y=\"Churn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"mXL8SE_TmU3S"},"outputs":[],"source":["#Visualisasi countplot untuk atribut 'Contract' dan 'Churn'. Masing-masing jenis\n","#'Contract' akan dibagi berdasarkan value pada 'Churn' untuk diketahui jumlahnya.\n","#Berdasarkan plot tersebut dapat dilihat bahwa value 'No' pada 'Month-to'Month',\n","#'One year Contract' dan 'Two year' mengungguli value 'Yes' disemua variabel yang\n","#sama. Value 'Yes' tertinggi dapat dilihat pada variabel 'Month-to-Month'. Hal\n","#ini dapat mengindikasikan lebih mudah bagi pengguna untuk membatalkan kontrak\n","#pada langganan bulanan daripada tahunan.\n","\n","sns.countplot(data=df,x=\"Contract\",hue=\"Churn\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"0KFjy-eBnAPl"},"outputs":[],"source":["#Cek dataset dengan df.head()\n","\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"XgE0vW1ViEDA"},"source":["# Correlation"]},{"cell_type":"markdown","metadata":{"id":"-U5ZTCdIjRUA"},"source":["> Korelasi membantu kita dalam memahami suatu koneksi dalam sebuah dataset. Misalnya, dalam suatu dataset yang berisikan penjualan mobil disuatu daerah. Mobil dengan kapasitas penumpang lebih besar dan harga yang lebih murah memiliki jumlah pembelian yang lebih tinggi daripada yang lainnya. Sangat penting untuk memastikan bahwa seluruh atribut telah bertipe numerik. Hal ini karena proses korelasi tidak dilakukan pada tipe data kategorikal. Salah satu cara untuk mengubah tipe datanya dilakukan dengan menggunakan encoding."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"ZI6Ob87HngcU"},"outputs":[],"source":["#Lakukan encoding dengan memanggil fungsi pd.get_dummies(). Konsekuensi dari\n","#jenis encoding ini adalah setiap value dalam atribut kategorikal akan diubah\n","#menjadi atribut. Buat variabel baru bernama df2 dan gunakan df sebagai sumbernya.\n","#Parameter drop_first=True digunakan untuk menghapus level \n","#pertama dalam suatu variabel. Langkah ini dapat dilakukan apabila tidak\n","#menghendaki adanya redudansi variabel.\n","\n","df2 = pd.get_dummies(df,drop_first=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"7cONNb6OotJg"},"outputs":[],"source":["#Buat variabel baru yang bernama df3 untuk menampung hasil korelasi dari df2.\n","#Semakin mendekati 1 maka semakin berkorelasi positif.\n","#Semakin mendekati -1 maka semakin berkorelasi negatif.\n","#Semakin mendekati 0 maka semakin tidak berkorelasi.\n","#Contoh dari adanya korelasi positif adalah apabila suatu variabel semakin\n","#tinggi nilainya, maka variabel yang lain juga akan semakin tinggi. Berlaku\n","#sebaliknya pada korelasi negatif.\n","\n","df3 = df2.corr()['Churn_Yes'].sort_values().reset_index()\n","df3"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"vUCd17YiqFae"},"outputs":[],"source":["#Hapus atribut 'Churn_Yes' untuk melihat korelasi antara 'Churn_Yes' dengan\n","#atribut lainnya.\n","\n","df3=df3[~df3['index'].str.contains('Churn_Yes')]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"iFtwOlZyqXLi"},"outputs":[],"source":["#Tampilkan hasil korelasi dalam sebuah barplot. \n","\n","chart = sns.barplot(data=df3,x=\"index\",y=\"Churn_Yes\")\n","\n","for item in chart.get_xticklabels():\n","  item.set_rotation(90)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"q7XBeWUQrNPw"},"outputs":[],"source":["#Gunakan heatmap untuk mengecek korelasi antar atribut secara menyeluruh.\n","\n","fig, ax = plt.subplots(figsize=(20, 20))\n","sns.heatmap(df2.corr(),cmap=\"Blues\", annot=True, ax=ax)\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"WyJscziK2euy"},"source":["**Hasil Korelasi**\n","\n","\n","> Berdasarkan korelasi yang dilakukan atas atribut 'Churn', dapat dilihat bahwa tidak terdapat atribut yang memiliki korelasi lebih dari 0,3 dan kurang dari -0,4. Hal ini menunjukan bahwa seluruh atribut memiliki korelasi yang lemah hingga moderat terhadap atribut 'Churn'. Hasil lainnya ditampilkan melalui heatmap. Setelah dilakukan korelasi terhadap keseluruhan atribut dengan heatmap, dapat dilihat bahwa terdapat korelasi yang cukup kuat antara 'InternetService_Fiber optic' dengan 'MonthlyCharges' dengan besar 0,79. Sehingga, dapat diambil hipotesis bahwa penggunaan fiberoptic berpengaruh terhadap biaya langganan perbulan."]}],"metadata":{"colab":{"provenance":[{"file_id":"1fUQXLW9FoVla9kHkvSCAA7akfsPcMaJw","timestamp":1669097892602},{"file_id":"1VlI3BWXhRJyCiPGl4lNZPTacwjOyLMyM","timestamp":1666854055435}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}